import React, { useState } from "react";
import { FaUpload, FaTimes, FaEdit } from "react-icons/fa";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowLeft } from "@fortawesome/free-solid-svg-icons";
import { useForm, Controller } from "react-hook-form";

const AddProducts = ({ isSidebarOpen }) => {
  const {
    register,
    handleSubmit,
    control,
    formState: { errors },
    setError,
    clearErrors,
  } = useForm();

  const [images, setImages] = useState([]);
  const [thumbnail, setThumbnail] = useState("");
  const [thumbnailError, setThumbnailError] = useState("");
  const [imageError, setImageError] = useState("");

  const handleAddProduct = (data) => {
    if (images.length === 0) {
      setError("images", {
        type: "manual",
        message: "At least one image is required",
      });
      return;
    }

    if (!thumbnail) {
      setError("thumbnail", {
        type: "manual",
        message: "Thumbnail image is required",
      });
      return;
    }

    const newProduct = {
      ...data,
      images,
      thumbnail,
    };
    console.log("Product added:", newProduct);
    clearErrors("images");
    clearErrors("thumbnail");
  };

  const handleImageUpload = (event) => {

    const files = Array.from(event.target.files);
    const validFiles = files.filter((file) => file.size <= 2 * 1024 * 1024); // 2MB
    const invalidFiles = files.filter((file) => file.size > 2 * 1024 * 1024);

    if (invalidFiles.length > 0) {
      setImageError("Some images were not uploaded because they exceed the 2MB limit.");
    } else {
      setImageError("");
    }

    setImages((prevImages) => [
      ...prevImages,
      ...validFiles.map((file) => URL.createObjectURL(file)),
    ]);
    clearErrors("images");

    // const files = Array.from(event.target.files);
    // setImages((prevImages) => [
    //   ...prevImages,
    //   ...files.map((file) => URL.createObjectURL(file)),
    // ]);
    // clearErrors("images");
  };

  const handleImageRemove = (index) => {
    setImages((prevImages) => prevImages.filter((_, i) => i !== index));
  };

  const handleImageEdit = (index, event) => {
    const file = event.target.files[0];
    if (file && file.size <= 2 * 1024 * 1024) { // 2MB
      const newImageURL = URL.createObjectURL(file);
      setImages((prevImages) =>
        prevImages.map((img, i) => (i === index ? newImageURL : img))
      );
    } else {
      setImageError("Image size should not exceed 2MB");
    }
    // const file = event.target.files[0];
    // if (file) {
    //   const newImageURL = URL.createObjectURL(file);
    //   setImages((prevImages) =>
    //     prevImages.map((img, i) => (i === index ? newImageURL : img))
    //   );
    // }
  };

  const handleThumbnailUpload = (event) => {
    const file = event.target.files[0];
    
    if (file.size > 2 * 1024 * 1024) { // 2MB
      setThumbnailError("Image size should not exceed 2MB");
      return;
    }
   
      setThumbnail(URL.createObjectURL(file));
      clearErrors("thumbnail");
    
  };

  const handleThumbnailRemove = () => {
    setThumbnail("");
  };

  const handleThumbnailEdit = (event) => {
    const file = event.target.files[0];
    if (file.size > 2 * 1024 * 1024) { // 2MB
      setThumbnailError("Image size should not exceed 2MB");
      return;
    }
    setThumbnail(URL.createObjectURL(file));
  };

  return (
    <div className={`bg-gray-100 transition-all duration-300 ${isSidebarOpen ? 'ml-10 mr-10' : 'ml-10 mr-10'}`}>
      <div className="mx-auto bg-gray-100 p-6 rounded-lg shadow-2xl">
        <div className="flex items-center gap-4 mb-4">
          <div className="border-2 rounded-lg w-10 h-10 flex justify-center items-center cursor-pointer">
            <FontAwesomeIcon icon={faArrowLeft} style={{ color: "#CCCCCC" }} className="cursor-pointer" />
          </div>
          <div>
            <h2 className="text-xl font-semibold">Add New Product</h2>
          </div>
        </div>
        <form onSubmit={handleSubmit(handleAddProduct)}>
          <div className="grid grid-cols-1 md:grid-cols-1 gap-2">
            <div>
              <div className="mb-4">
                <label className="block text-sm font-normal mb-1">
                  Product Name
                </label>
                <input
                  type="text"
                  className="w-full p-2 border border-gray-300 rounded-md"
                  {...register("productName", {
                    required: "Product Name is required",
                    validate: (value) => value.trim() !== "" || "No spaces allowed",
                  })}
                />
                {errors.productName && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.productName.message}
                  </p>
                )}
              </div>

              <h3 className="text-lg font-medium mb-2">Thumbnail Image</h3>
              <div className="flex flex-wrap gap-4 mb-4">
                {thumbnail ? (
                  <div className="relative">
                    <img
                      src={thumbnail}
                      alt="Thumbnail"
                      className="w-40 h-40 object-cover rounded-md"
                    />
                    <button
                      className="absolute top-2 right-2 text-red-500 bg-white rounded-full p-1"
                      onClick={handleThumbnailRemove}
                    >
                      <FaTimes />
                    </button>
                    <button
                      className="absolute top-10 right-2 text-blue-500 bg-white rounded-full p-1"
                      onClick={() =>
                        document.getElementById("edit-thumbnail").click()
                      }
                    >
                      <FaEdit />
                    </button>
                    <input
                      id="edit-thumbnail"
                      type="file"
                      className="hidden"
                      onChange={handleThumbnailEdit}
                    />
                  </div>
                ) : (
                  <label className="border-dashed border-2 border-gray-300 p-4 w-40 h-40 flex items-center justify-center cursor-pointer rounded-md">
                    <input
                      type="file"
                      className="hidden"
                      onChange={handleThumbnailUpload}
                    />
                    <FaUpload className="text-gray-500" />
                    <span className="ml-2 text-gray-500">Click to upload</span>
                  </label>
                )}
                

                {!thumbnail  && (
                  <p className="text-red-500 text-sm mt-1">
                    {/* {errors.thumbnail.message} */}
                    Image is required
                  </p>
                )}
                  {thumbnailError && thumbnail==="" && (
                  <p className="text-red-500 text-sm mt-1">
                    {/* {errors.thumbnail.message} */}
                    {thumbnailError}
                  </p>
                )}
              </div>
            </div>
          </div>
          <div className="grid grid-cols-2 md:grid-cols-2 gap-6 mt-6">
            <div>
              <h3 className="text-lg font-medium mb-2">Category</h3>
              <div className="mb-4">
                <label className="block text-sm font-normal mb-1">
                  Product Category
                </label>
                <select
                  className="w-full p-2 border border-gray-300 rounded-md"
                  {...register("category", {
                    required: "Category is required",
                  })}
                >
                  <option value="Health & Medicine">Health & Medicine</option>
                  <option value="Beauty">Beauty</option>
                  {/* Add more categories as needed */}
                </select>
                {errors.category && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.category.message}
                  </p>
                )}
              </div>
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Inventory</h3>
              <div className="mb-4">
                <label className="block text-sm font-normal mb-1">Quantity</label>
                <input
                  type="text"
                  className="w-full p-2 border border-gray-300 rounded-md"
                  {...register("quantity", {
                    required: "Quantity is required",
                    pattern: {
                      value: /^[1-9]\d*$/,
                      message: "Quantity must be a positive number",
                    },
                  })}
                />
                {errors.quantity && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.quantity.message}
                  </p>
                )}
              </div>
              <div className="mb-4">
                <label className="block text-sm font-normal mb-1">
                  SKU (Optional)
                </label>
                <input
                  type="text"
                  className="w-full p-2 border border-gray-300 rounded-md"
                  {...register("sku")}
                />
              </div>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
            <div>
              <h3 className="text-lg font-medium mb-2">Shipping and Delivery</h3>
              <div className="mb-4">
                <label className="block text-sm font-normal mb-1">
                  Items Weight (kg)
                </label>
                <input
                  type="text"
                  className="w-full p-2 border border-gray-300 rounded-md"
                  {...register("weight", {
                    required: "Weight is required",
                    pattern: {
                      value: /^\d+(\.\d{1,2})?$/,
                      message: "Enter a valid weight",
                    },
                  })}
                />
                {errors.weight && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.weight.message}
                  </p>
                )}
              </div>
              <div className="grid grid-cols-3 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-normal mb-1">
                    Length (in)
                  </label>
                  <input
                    type="text"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    {...register("length", {
                      required: "Length is required",
                      pattern: {
                        value: /^\d+(\.\d{1,2})?$/,
                        message: "Enter a valid length",
                      },
                    })}
                  />
                  {errors.length && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.length.message}
                    </p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-normal mb-1">
                    Breadth (in)
                  </label>
                  <input
                    type="text"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    {...register("breadth", {
                      required: "Breadth is required",
                      pattern: {
                        value: /^\d+(\.\d{1,2})?$/,
                        message: "Enter a valid breadth",
                      },
                    })}
                  />
                  {errors.breadth && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.breadth.message}
                    </p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-normal mb-1">
                    Height (in)
                  </label>
                  <input
                    type="text"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    {...register("height", {
                      required: "Height is required",
                      pattern: {
                        value: /^\d+(\.\d{1,2})?$/,
                        message: "Enter a valid height",
                      },
                    })}
                  />
                  {errors.height && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.height.message}
                    </p>
                  )}
                </div>
              </div>
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Pricing</h3>
              <div className="mb-4">
                <label className="block text-sm font-normal mb-1">Price</label>
                <input
                  type="text"
                  className="w-full p-2 border border-gray-300 rounded-md"
                  {...register("price", {
                    required: "Price is required",
                    pattern: {
                      value: /^\d+(\.\d{1,2})?$/,
                      message: "Enter a valid price",
                    },
                  })}
                />
                {errors.price && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.price.message}
                  </p>
                )}
              </div>
              <div className="mb-4">
                <label className="block text-sm font-normal mb-1">
                  Compare at Price
                </label>
                <input
                  type="text"
                  className="w-full p-2 border border-gray-300 rounded-md"
                  {...register("comparePrice", {
                    required: "Compare at Price is required",
                    pattern: {
                      value: /^\d+(\.\d{1,2})?$/,
                      message: "Enter a valid price",
                    },
                  })}
                />
                {errors.comparePrice && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.comparePrice.message}
                  </p>
                )}
              </div>
            </div>
          </div>
          <div className="mb-4 mt-6">
            <h3 className="text-lg font-medium mb-2">Variant</h3>
            <button className="text-blue-500 hover:underline">+ Add Variant</button>
          </div>

          <h3 className="text-lg font-medium mb-2">Product Images</h3>
          <div className="flex flex-wrap gap-4 mb-4">
            <label className="border-dashed border-2 border-gray-300 p-4 w-40 h-40 flex items-center justify-center cursor-pointer rounded-md">
              <input
                type="file"
                className="hidden"
                multiple
                onChange={handleImageUpload}
              />
              <FaUpload className="text-gray-500" />
              <span className="ml-2 text-gray-500">Click to upload</span>
            </label>
            {images.map((image, index) => (
              <div key={index} className="relative">
                <img
                  src={image}
                  alt="Product"
                  className="w-40 h-40 object-cover rounded-md"
                />
                <button
                  className="absolute top-2 right-2 text-blue-500 bg-white rounded-full p-1"
                  onClick={() =>
                    document.getElementById(`edit-image-${index}`).click()
                  }
                >
                  <FaEdit />
                </button>
                <input
                  id={`edit-image-${index}`}
                  type="file"
                  className="hidden"
                  onChange={(event) => handleImageEdit(index, event)}
                />
                <button
                  className="absolute top-10 right-2 text-red-500 bg-white rounded-full p-1"
                  onClick={() => handleImageRemove(index)}
                >
                  <FaTimes />
                </button>
              </div>
            ))}
            {images.length===0 && (
              <p className="text-red-500 text-sm mt-1">
                Atleast one image is required
              </p>
            )}
               {imageError && (
              <p className="text-red-500 text-sm mt-1">{imageError}</p>
            )}
          </div>

          <div className="mb-4">
            <label className="block text-lg font-medium mb-1">
              Product Description
            </label>
            <Controller
              name="description"
              control={control}
              // defaultValue={`We've partnered with Coastal Green Wellness based out of Myrtle Beach South Carolina`}
              rules={{
                required: "Description is required",
                validate: (value) => value.trim() !== "" || "No spaces allowed",
              }}
              render={({ field }) => (
                <ReactQuill
                  className="h-64"
                  // style={{ height: "30vh"  }}
                  value={field.value}
                  onChange={field.onChange}
                />
              )}
            />
            {errors.description && (
              <p className="text-red-500 text-sm mt-12">
                {errors.description.message}
              </p>
            )}
          </div>
          <div className="flex justify-end mt-20">
            <button
              type="button"
              className="bg-red-500 text-white py-2 px-4 rounded-md mr-4"
            >
              Discard
            </button>
            <button
              type="submit"
              className="bg-blue-500 text-white py-2 px-4 rounded-md"
            >
              Add Product
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddProducts;
